name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  schedule:
    - cron: '0 0 1 * *'

  workflow_dispatch:
    inputs:
      upload:
        description: 'Upload to PyPi Test'
        default: false
jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, windows-2019, macos-11 ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Static Analysis
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 --count --max-line-length=120 --statistics pillow_jpls

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.10.2

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Python 2.7 not supported
          # Python 3.5 Deprecated
          # Python 3.6 Deprecated
          # PyPy builds dont support conan
          # Pillow doesn't build on musilinux'
          # Only use released wheels for Pillow
          # Pillow doesn't have wheels for 32-bit Python 3.12
          CIBW_SKIP: cp27-* cp35-* cp36-* pp* *-musllinux* cp312-win32 cp312-manylinux_i686
          CIBW_BEFORE_BUILD: "pip install Pillow --only-binary=:all:"
          CIBW_TEST_REQUIRES: pytest numpy
          CIBW_BEFORE_TEST: "pip install Pillow --only-binary=:all:"
          CIBW_TEST_COMMAND: pytest -v {project}/test
          CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
          CIBW_BUILD_VERBOSITY: 1
          CIBW_TEST_SKIP: "*-macosx_arm64"
          # Pybind std::variant support requires 10.14+
          MACOSX_DEPLOYMENT_TARGET: 10.15

      - name: Upload wheel files
        uses: actions/upload-artifact@v3
        with:
            path: ./wheelhouse/*.whl

  make_sdist:
    name: Make SDist
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  deploy_pypi:
    name: Deploy to PyPi
    if: (github.event_name == 'release' && github.event.action == 'published') || github.event.inputs.upload
    needs: [build_wheels, make_sdist]
    runs-on: ubuntu-20.04
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifact
          path: dist

      - name: Publish a Python distribution to PyPI
        if: github.ref_name == 'main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish package to TestPyPI
        if: github.ref_name != 'main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
